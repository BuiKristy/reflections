lesson_2_reflections.txt

What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, you create a directory that contains all the necessary repository files that holds the metadata. You do it because you can begin tracking the files.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area include the information of the changes to be committed to the repository, while the untracked files in the working directory haven't been committed yet. I think it offers the value of being able to choose the files you want to add to commit changes.

How can you use the staging area to make sure you have one commit per logical change?

You can use your git diff --staged to compare it to the most recent commit in your repository and decide whether it's a reasonable change to commit. And you can also use git diff to view the changes you've made since adding the files to the staging area as well if you feel that your change wasn't significant enough.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches could be useful for if you're wanting to work on a program that involves an independent line of development. Such as in the video where they have an experimental feature, or an Italian version, it could be like an abstraction for a new directory where you can experiment on adding or working new features that you're unsure of.

How do the diagrams help you visualize the branch structure?

The diagrams help me visualize the branch structure by showing the commits for each branch and how they lead back to its parent. And I can also visualize the commits that aren't part of any branch that you can create a new branch for when you have a commit that is unreachable. It's a good way to see what kind of branches there are and what commits may not be part of a branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging two branches together is that you create one branch that has all the commits of both branches that are sorted by timestamp. And as a result, you have two separate branches of commits that are both the parent of the merged branch. It's represented this way because each branch has different parents and you can't create one line of commits that express that, so it's one branch that separates off into two lines of commits.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

The pros of automatically merging is that it can do so when there aren't conflicts in the code, such as when two programmers edit the same code in different ways. As a result, Git always notifies the user when there are such conflicts and Git cannot automatically merge which can become annoying if it's something obvious but also very helpful. Always doing merges manually is a task that can become very tedious very quickly, especially when people are creating different code and are just trying to put pieces together, which is where Git can be very useful. The pro side of manually merging is that when Git cannot, the user can communicate with their partner to fix any conflicts that might not be obvious.