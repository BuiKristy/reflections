When would you want to use a remote repository rather than keeping all your work local?
  You'd want to use a remote repository when you're uploading your code online for other people to work on.
  It's much easier for people to collaborate when you have all the work in one place and you can push or fetch files onto 
  your computer to and from GitHub. When you're working locally, you can then upload your work to GitHub and still merge files
  and such. But then other teammates will also be able to remotely access your work and upload their work as well.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
  Pulling changes manually is better because you get to figure out where changes are being pulled to and Git doesn't have to 
  guess what branch you're wanting to pull changes to and such. There may also be a lot of changes you don't get a chance to see, and
  pulling files can be a problem in general because you don't get a chance to see what changes are being made and your working
  directory gets updated without seeing what kinds of things were changed.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
  Forks are used for when you want to clone something on a GitHub repository. It's much easier to do so than to clone a repository from 
  GitHub to your computer and then pushing it to your own account because it doesn't give recognition to the GitHub user either. Clones 
  are used for when you want to copy a repository into a new directory. Branches are similar to forks in your own repository and are for 
  when you are working on something new that separate from your main working code and can be experimental to work on multiple features
  at once. 

What is the benefit of having a copy of the last known state of the remote stored locally?
  The benefit of having a copy of the last known state is that you could have a stable copy of something to work with in case you run
  into any problems that may occur when you're constanting fetching and pulling or pushing files. Having a backup of something is 
  always useful if you're in need of a recovery point, even if it's not a current copy.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
  Collaborating without using Git or GitHub would be much harder in general because you would need something like Google Drive or 
  Dropbox to store all the files in one place. All the files would still be in one place and you can still communicate through email 
  or Skype, but it would be a lot harder in general because there are no merge functions and you could potentially overwrite someone's 
  file if you're not careful. You also don't have a list of commits that show your constant changes, and it would then be harder to 
  keep track of what's been edited or changed.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
  Making changes in a separate branch means that you can edit things as you want without breaking the main code. You can also change
  and edit things, or work on a different feature that may still be buggy or experimental. It's a chance for you to work on something
  different from the main idea without affecting the working code. So just by wanting to make a change, work on something new, fixing
  something without being entirely sure are all reasons for making a separate branch to work on instead of doing so directly in 
  master. You can always merge your changes into the master branch once everything in it is complete, so it's really good to have 
  different branches for that.